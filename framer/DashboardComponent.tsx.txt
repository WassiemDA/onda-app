import { useEffect, useState } from "react"
import { useDashboardOverride } from "./useDashboardOverride.tsx"
import { MusicPersonaSummary } from "./MusicPersonaSummary.tsx"
import { PlaylistBlock } from "./PlaylistBlock.tsx"
import { MoodBlock } from "./MoodBlock.tsx"

type Persona = {
    userName?: string
    personaSummary: string
    topArtists?: string[]
    mood?: string
    vibe?: string
    playlists: {
        title: string
        description: string
        tracks: {
            title: string
            artist: string
            spotifyId: string
            explanation: string
        }[]
    }[]
}

export default function Dashboard() {
    const [persona, setPersona] = useState<Persona | null>(null)
    const [loading, setLoading] = useState(true)
    const [regenerating, setRegenerating] = useState(false)
    const override = useDashboardOverride()

    const fetchPersona = async () => {
        const token = localStorage.getItem("spotify_access_token")
        if (!token) return

        setLoading(true)
        try {
            const fetchDataRes = await fetch(
                `https://onda-app.au.ngrok.io/persona?access_token=${token}`
            )
            const fetchData = await fetchDataRes.json()

            const generateRes = await fetch(
                "https://onda-app.au.ngrok.io/persona/generate",
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(fetchData),
                }
            )

            const finalPersona = await generateRes.json()
            setPersona(finalPersona)
        } catch (err) {
            console.error("Error fetching persona:", err)
        } finally {
            setLoading(false)
        }
    }

    useEffect(() => {
        fetchPersona()
    }, [])

    if (loading) return <div>Loading your music persona...</div>
    if (!persona) return <div>Could not load persona.</div>

    const mergedPersona = {
        ...persona,
        ...override,
    }

    return (
        <div>
            <h1>ðŸŽ§ Your Music Persona</h1>
            <MusicPersonaSummary summary={mergedPersona.personaSummary} />
            <button onClick={fetchPersona} disabled={regenerating}>
                Regenerate My Persona
            </button>
            {mergedPersona.playlists?.map((playlist, idx) => (
                <div key={idx}>
                    <MoodBlock
                        title={playlist.title}
                        description={playlist.description}
                    />
                    {playlist.tracks.map((track, i) => (
                        <PlaylistBlock key={i} track={track} />
                    ))}
                </div>
            ))}
        </div>
    )
}
